# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.5
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
            
      - run:
          name: install dependencies
          command: |
            wget https://repo.continuum.io/miniconda/Miniconda3-3.7.0-Linux-x86_64.sh -O ~/miniconda.sh
            bash ~/miniconda.sh -b -p $HOME/miniconda
            export PATH="$HOME/miniconda/bin:$PATH"
            conda update conda
            conda create -n test python=3.6 pip 
            source activate test
            conda install -c intel -y mkl            
            conda install -y pytorch-cpu torchvision-cpu -c pytorch

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
        
      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            export PATH="$HOME/miniconda/bin:$PATH"            
            source activate test            
            pip install . --user
            python setup.py test

      - run:
          name: run coverage
          command: |
            export PATH="$HOME/miniconda/bin:$PATH"
            export CODECOV_TOKEN="b12be258-0a95-4053-8c43-d1a8258be114"
            source activate test
            pip install codecov --user
            codecov
            
      - store_artifacts:
          path: test-reports
          destination: test-reports
          
